#!/bin/bash -
#
# Copyright (C) 2015 Alan D. Salewski <salewski@att.net>
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
#
# mutt-msg-sender-and-local-datetime: Intended to be invoked from mutt at
# runtime (via a format string that ends with a '|' character; see the section
# "Filters" in the mutt manual). The output from this program will be used by
# mutt as the updated filter string, which mutt will parse again.
#
# This filter expects to receive (as the first non-option parameter) the
# formatted string for the mutt 'index' view on stdin, which is expected to
# contain two date fields (the message date in the sender's local time, and my
# local time), delineated with something like this:
#
#     "23666  N    [S:2015-10-26 12:55:52]  2015-10-26 12:55:52  sender@example.com             (   144)     blah blah blah some random subject"
#      1234567890123456789012345678901234567890123456789012345678901234567890...
#
# The string starting with '[S:' is the message date in the sender's local
# time, and the date that follows it is my local time.
#
# If the sender's "YYYY-MM-DD hh:mm" portion is identical to my local time,
# this program will suppress the sender's time chunk from the output. For
# example, the output for the above example would be:
#
#     "23666  N                             2015-10-26 12:55:52  sender@example.com             (   144)     blah blah blah some random subject"
#      1234567890123456789012345678901234567890123456789012345678901234567890...
#
# The idea is that I only want to show the sender's time if it is different
# from my local time, as that will allow me to see at a glance in the mutt
# index which messages have come from people operating in different timezones.
#
# If the input is not in the expected format, then the entire value is printed
# "as is" on stdout. So in the event of unexpected input, the program is an
# elaborate NOOP.
#
# HINT:
#
#     folder-hook . 'set index_format="mutt-msg-sender-and-local-datetime \"%4C  %Z  [S:%d]  %D  %-30.30L (%6l) %?X?%2X&  ?  %s\""|'
#

declare -r PROG='mutt-msg-sender-and-local-datetime'


# FIXME: one day this will be filtered in at build time
declare -r MAINTAINER='Alan D. Salewski <salewski@att.net>'

# FIXME: one day this will be filtered in at build time
declare -r VERSION='0.0.1'

# FIXME: one day this will be filtered in at build time
# This variable is replaced at build time
# declare -r gl_const_build_date='@BUILD_DATE@'
# declare -r gl_const_release="${VERSION}  (built: ${gl_const_build_date})"
declare -r gl_const_release="${VERSION}"

BE_VERBOSE=false


declare -a F_CLEANUP_HOOK_NAMES=()

function f_add_cleanup_hook_name () {
    F_CLEANUP_HOOK_NAMES+=( $1 );
}


function f_cleanup () {

    if test ${#F_CLEANUP_HOOK_NAMES[@]} -eq 0; then
        # No cleanup hooks, so nothing to do
        return
    fi

    local cleanup_hook
    local idx

    let idx=${#F_CLEANUP_HOOK_NAMES[@]}-1

    # Note that we're running the cleanup hooks in opposite order from which
    # they were installed.
    #
    while test $idx -ge 0; do

        cleanup_hook=${F_CLEANUP_HOOK_NAMES[$idx]}

        if $BE_VERBOSE; then
            printf "${PROG} (info): running cleanup hook: [%s]\n" "${cleanup_hook}" 1>&2
        fi

        test -n "$cleanup_hook" && eval "$cleanup_hook"

        let idx=$idx-1
    done
}

function f_cleanup_and_die () {
    f_cleanup
    exit 1
}

trap 'printf "$PROG (warn): HUP signal caught; bailing out\n"  1>&2; f_cleanup_and_die' HUP
trap 'printf "$PROG (warn): INT signal caught; bailing out\n"  1>&2; f_cleanup_and_die' INT
trap 'printf "$PROG (warn): QUIT signal caught; bailing out\n" 1>&2; f_cleanup_and_die' QUIT
trap 'printf "$PROG (warn): TERM signal caught; bailing out\n" 1>&2; f_cleanup_and_die' TERM

trap 'f_cleanup' EXIT



f_print_help () {

    cat <<EOF
usage: $PROG [OPTION...] FILE...
Does this, that, and the other thing

Mandatory arguments to long options are mandatory for short options too.

  -h, --help                     Print this help message on stdout
  -V, --version                  Print the version of the program on stdout
  -v, --verbose                  Tell what is being done. Two or more -v options turns on tracing (set -x)
      --                         Signals the end of options and disables further options processing. All
                                   remaining arguments will be passed through to confget(1)

Report bugs to $MAINTAINER.
EOF
}

f_print_version () {
    cat <<EOF
${PROG} ${gl_const_release}
Copyright (C) ${COPYRIGHT_DATES} Alan D. Salewski <salewski@att.net>
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOF
}


while test $# -gt 0 ; do

    option=$(expr "x$1" : 'x\(--[^=]*\)' \| \
                  "x$1" : 'x\(-.\)'      \| \
                  "x$1" : 'x\(.*\)')

    optarg=$(expr "x$1" : 'x--[^=]*=\(.*\)' \| \
                  "x$1" : 'x-.\(.*\)')

    case $1 in

        --help | -h )
            # print help message
            f_print_help
            exit 0
            ;;

        --version | -V )
            # print program version info
            f_print_version
            exit 0
            ;;

        --verbose | -v )
            # Accumulating 'verbose' opt. A single -v opt simply turns
            # BE_VERBOSE on; two or more '-v' opts turns tracing on. Note that
            # if you intend to turn tracing on, you'll probably want your -v
            # opts to be the first opts on the command line (so they take
            # effect earlier).
            if $BE_VERBOSE; then
                # We've seen at least one -v opt before, so now we're turning tracing on
                set -x
            else
                # First -v opt we're seeing
                BE_VERBOSE=true
            fi
            shift
            ;;

        -- ) # Stop option processing
            shift
            break
            ;;

        --* | -* )
            # Unrecognized option
            printf "${PROG} (error): unrecognized option \`%s'\n" "$option" 1>&2
            f_print_help 1>&2
            exit 1
            ;;

        * ) # Unrecognized non-option

            # We'll treat the first non-option and all remaining arguments as
            # names of files to process; note that we DO NOT shift off the
            # first, but merely stop processing command line options when we
            # see it.
            break
            ;;
    esac
done

declare -r re_expected_pattern='^(.*[[:space:]]{1,})([[]S:)('\
'[[:digit:]]{4}-[[:digit:]]{1,2}-[[:digit:]]{1,2}[[:space:]]{1,}[[:digit:]]{1,2}:[[:digit:]]{1,2}'\
')('\
':[[:digit:]]{1,2}'\
'[]]'\
'[[:space:]]{1,}'\
')('\
'[[:digit:]]{4}-[[:digit:]]{1,2}-[[:digit:]]{1,2}[[:space:]]{1,}[[:digit:]]{1,2}:[[:digit:]]{1,2}'\
')('\
':[[:digit:]]{1,2}'\
'.*)$'\

# while read -r orig_string; do

declare -r orig_string=$1

    if [[ "$orig_string" =~ $re_expected_pattern ]]; then

        if $BE_VERBOSE; then
            printf "${PROG} (info): input is in expected pattern\n" 1>&2
        fi

        whatev1=${BASH_REMATCH[1]}
        whatev2=${BASH_REMATCH[2]}  # "[S:"

        dt_lft=${BASH_REMATCH[3]}

        whatev3=${BASH_REMATCH[4]}  # "]  "

        dt_rit=${BASH_REMATCH[5]}

        whatev4=${BASH_REMATCH[6]}

        if test "${dt_lft}" = "${dt_rit}"; then

            str_with_olength="${whatev2}${dt_lft}${whatev3}"
            needed_spaces=${#str_with_olength}

            printf -v new_string '%s%'${needed_spaces}'s%s%s' "${whatev1}" '' "${dt_rit}" "${whatev4}"

# # DEBUG go
#             printf 'O:%s\n' "${orig_string}"
#             printf 'N:%s\n' "${new_string}"
# # DEBUG end

            printf '%s\n' "${new_string}"

        else

            if $BE_VERBOSE; then
                printf "${PROG} (info): dates are different; passing through unchanged\n" 1>&2
            fi

            printf '%s\n' "$orig_string"

        fi

    else

        if $BE_VERBOSE; then
            printf "${PROG} (warn): input string is not in expected format; passing through unchanged\n" 1>&2
        fi
        printf '%s\n' "$orig_string"
    fi

# done
