#!/bin/bash -
#
# ads-mutt-index-format-custom: Intended to be invoked from mutt at runtime
# (via a format string that ends with a '|' character; see the section
# "Filters" in the mutt manual). The output from this program will be used by
# mutt as the updated filter string, which mutt will parse again.
#
# This filter expects to receive (as the first non-option parameter) the
# formatted string for the mutt 'index' view on stdin, which is expected to
# contain two date fields (the message date in the sender's local time, and my
# local time), delineated with something like this:
#
#     "23666  N    [S:2015-10-26 12:55:52]  2015-10-26 12:55:52  [LIST: ads             ]  sender@example.com             (b:   1.3K; l:   144)     blah blah blah some random subject"
#      1234567890123456789012345678901234567890123456789012345678901234567890...
#
# The string starting with '[S:' is the message date in the sender's local
# time, and the date that follows it is my local time.
#
# The string starting with '[LIST:' is the "username" portion of a known AND
# subscribed mailing list address, or the name of the mailbox file if the message
# is not to such a list (this is the behavior of mutt's '%B' expando).
#
# If the sender's "YYYY-MM-DD hh:mm" portion is identical to my local time,
# this program will suppress the sender's time chunk from the output. For
# example, the output for the above example would be:
#
#     "23666  N                             2015-10-26 12:55:52  [ads]                sender@example.com             (b:  1.3K; l:   144)     blah blah blah some random subject"
#      1234567890123456789012345678901234567890123456789012345678901234567890...
#
# The idea is that I only want to show the sender's time if it is different
# from my local time, as that will allow me to see at a glance in the mutt
# index which messages have come from people operating in different timezones.
#
# Similarly for mailing list names: I do not want to see '[ads]' as the mailing
# list name a gazillion times in my inbox, so this program will remove the field
# from the output if the provides value matches one of the preconfigured known
# values;  see $KNOWN_ALTERNATES below.
# FIXME: Maybe figure out a way to get mutt to pass the list of 'alternate' values here?
#
# If the input is not in the expected format, then the entire value is printed
# "as is" on stdout. So in the event of unexpected input, the program is an
# elaborate NOOP.
#
# HINT:
#
#     folder-hook . 'set index_format="ads-mutt-index-format-custom \"%4C  %Z  [S:%d]  %D  [LIST: %-16.16B]  %-30.30F (b: %6c; l: %6l) %?X?%2X&  ?  %s\""|'
#
#
# HISTORY:
#     This program was derived from the 'mutt-msg-sender-and-local-datetime'
#     script I wrote several years ago (GPL2+, just like this one).

declare -r PROG='ads-mutt-index-format-custom'


# FIXME: one day this will be filtered in at build time
declare -r MAINTAINER='Alan D. Salewski <salewski@att.net>'

# FIXME: one day this will be filtered in at build time
declare -r VERSION='0.0.1'

# FIXME: one day this will be filtered in at build time
# This variable is replaced at build time
# declare -r gl_const_build_date='@BUILD_DATE@'
# declare -r gl_const_release="${VERSION}  (built: ${gl_const_build_date})"
declare -r gl_const_release="${VERSION}"

BE_VERBOSE=false
#BE_VERBOSE=true

# FIXME: Get this from a config file or something; maybe find a way to have mutt hand us the list of 'alternate' names?
declare -a gl_ignorable_nonlists=()
gl_ignorable_nonlists+=( 'ads' )


declare -a F_CLEANUP_HOOK_NAMES=()

function f_add_cleanup_hook_name () {
    F_CLEANUP_HOOK_NAMES+=( $1 );
}


function f_cleanup () {

    if test ${#F_CLEANUP_HOOK_NAMES[@]} -eq 0; then
        # No cleanup hooks, so nothing to do
        return
    fi

    local cleanup_hook
    local idx

    let idx=${#F_CLEANUP_HOOK_NAMES[@]}-1

    # Note that we're running the cleanup hooks in opposite order from which
    # they were installed.
    #
    while test $idx -ge 0; do

        cleanup_hook=${F_CLEANUP_HOOK_NAMES[$idx]}

        if $BE_VERBOSE; then
            printf "${PROG} (info): running cleanup hook: [%s]\n" "${cleanup_hook}" 1>&2
        fi

        test -n "$cleanup_hook" && eval "$cleanup_hook"

        let idx=$idx-1
    done
}

function f_cleanup_and_die () {
    f_cleanup
    exit 1
}

trap 'printf "$PROG (warn): HUP signal caught; bailing out\n"  1>&2; f_cleanup_and_die' HUP
trap 'printf "$PROG (warn): INT signal caught; bailing out\n"  1>&2; f_cleanup_and_die' INT
trap 'printf "$PROG (warn): QUIT signal caught; bailing out\n" 1>&2; f_cleanup_and_die' QUIT
trap 'printf "$PROG (warn): TERM signal caught; bailing out\n" 1>&2; f_cleanup_and_die' TERM

trap 'f_cleanup' EXIT



f_print_help () {

    cat <<EOF
usage: $PROG [OPTION...] FILE...
Does this, that, and the other thing

Mandatory arguments to long options are mandatory for short options too.

  -h, --help                     Print this help message on stdout
  -V, --version                  Print the version of the program on stdout
  -v, --verbose                  Tell what is being done. Two or more -v options turns on tracing (set -x)
      --                         Signals the end of options and disables further options processing. All
                                   remaining arguments will be passed through to confget(1)

Report bugs to $MAINTAINER.
EOF
}

f_print_version () {
    cat <<EOF
${PROG} ${gl_const_release}

Copyright (C) 2019 Alan D. Salewski <salewski@att.net>

License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alan D. Salewski.
EOF
}


while test $# -gt 0 ; do

    option=$(expr "x$1" : 'x\(--[^=]*\)' \| \
                  "x$1" : 'x\(-.\)'      \| \
                  "x$1" : 'x\(.*\)')

    optarg=$(expr "x$1" : 'x--[^=]*=\(.*\)' \| \
                  "x$1" : 'x-.\(.*\)')

    case $1 in

        --help | -h )
            # print help message
            f_print_help
            exit 0
            ;;

        --version | -V )
            # print program version info
            f_print_version
            exit 0
            ;;

        --verbose | -v )
            # Accumulating 'verbose' opt. A single -v opt simply turns
            # BE_VERBOSE on; two or more '-v' opts turns tracing on. Note that
            # if you intend to turn tracing on, you'll probably want your -v
            # opts to be the first opts on the command line (so they take
            # effect earlier).
            if $BE_VERBOSE; then
                # We've seen at least one -v opt before, so now we're turning tracing on
                set -x
            else
                # First -v opt we're seeing
                BE_VERBOSE=true
            fi
            shift
            ;;

        -- ) # Stop option processing
            shift
            break
            ;;

        --* | -* )
            # Unrecognized option
            printf "${PROG} (error): unrecognized option \`%s'\n" "$option" 1>&2
            f_print_help 1>&2
            exit 1
            ;;

        * ) # Unrecognized non-option

            # We'll treat the first non-option and all remaining arguments as
            # names of files to process; note that we DO NOT shift off the
            # first, but merely stop processing command line options when we
            # see it.
            break
            ;;
    esac
done

# Note that we do not capture the '[LIST:' tag or its closing ']' bracket. The
# brackets are re-inserted down below, and the 'LIST:' token is omitted in the
# output (it is only used by our mutt config to create an easy-to-use landmark
# for this program).
#
# Example input strings (each indented here by 4 spaces for readability):
#
#     5  N F  [S:2005-06-02 11:52:28]  2005-06-02 11:52:28  [LIST: ads             ]  To asalewski@gmail.com         (b:   0.1K; l:      1)     testing 01
#
declare -r re_expected_pattern='^(.*[[:space:]]{1,})([[]S:)('\
'[[:digit:]]{4}-[[:digit:]]{1,2}-[[:digit:]]{1,2}[[:space:]]{1,}[[:digit:]]{1,2}:[[:digit:]]{1,2}'\
')('\
':[[:digit:]]{1,2}'\
'[]]'\
'[[:space:]]{1,}'\
')('\
'[[:digit:]]{4}-[[:digit:]]{1,2}-[[:digit:]]{1,2}[[:space:]]{1,}[[:digit:]]{1,2}:[[:digit:]]{1,2}'\
')('\
':[[:digit:]]{1,2}[[:space:]]{1,}'\
')'\
'[[]LIST:'\
'([[:space:]]*[^]]{1,})'\
'[]]'\
'('\
'[[:space:]]{1,}.*)$'

declare -r orig_string=$1
declare    outp_string=''

if [[ "$orig_string" =~ $re_expected_pattern ]]; then :; else

    if $BE_VERBOSE; then
#        printf "${PROG} (warn): input string is not in expected format; passing through unchanged\n" 1>&2
        printf "${PROG} (warn): input string is not in expected format; passing through unchanged\n    %s\n" "${orig_string}" 1>&2
    fi
    printf '%s\n' "$orig_string"
    exit 0  # XXX: maybe use something non-zero to indicate this scenario? What will mutt do if we exit non-zero?
fi

if $BE_VERBOSE; then
#    printf "${PROG} (info): input is in expected pattern\n" 1>&2
    printf "${PROG} (info): input is in expected pattern\n    %s\n" "${orig_string}" 1>&2
fi


# : number of captures: ${#BASH_REMATCH[@]}
# # DEBUG go
# for idx in $(seq 1 $((${#BASH_REMATCH[@]}-1))); do
#     printf "${PROG} (debug) BASH_REMATCH[%d]: %s\n" "$idx" "${BASH_REMATCH[$idx]}" 1>&2
# done
# # DEBUG end

whatev1=${BASH_REMATCH[1]}
whatev2=${BASH_REMATCH[2]}  # "[S:"

dt_lft=${BASH_REMATCH[3]}

whatev3=${BASH_REMATCH[4]}  # seconds portion of left-hand date, closing bracket, plus spaces

dt_rit=${BASH_REMATCH[5]}

whatev4=${BASH_REMATCH[6]}  # seconds portion of right-hand date, closing bracket, plus spaces

listnm_raw=${BASH_REMATCH[7]}   # list name (or mail file name, such as 'ads'), possibly surrounded by whitespace

whatev5=${BASH_REMATCH[8]}  # the rest of the index format line

declare -r whatev1 whatev2 dt_lft whatev3 dt_rit whatev4 listnm_raw whatev5

if test "${dt_lft}" = "${dt_rit}"; then

    str_with_olength="${whatev2}${dt_lft}${whatev3}"
    needed_spaces=${#str_with_olength}

    # Create initial portion of our new ouptut string
    printf -v outp_string '%s%'${needed_spaces}'s%s%s' "${whatev1}" '' "${dt_rit}" "${whatev4}"
else

    if $BE_VERBOSE; then
        printf "${PROG} (info): dates are different; passing through unchanged\n" 1>&2
    fi

    # Reconstruct original input string through the right-hand date portion.
    printf -v outp_string '%s%s%s%s%s%s' "${whatev1}" "${whatev2}" "${dt_lft}" "${whatev3}" \
                                         "${dt_rit}" "${whatev4}"
fi


# The number of spaces that the list name field should take in total, including
# the '[' and ']' brackets that we omitted in our regex capturing above (hence
# the plus two here).
#
needed_listnm_spaces=$(( ${#listnm_raw} + 2 ))
read -r -d '' listnm <<<"${listnm_raw}"   # trim; ignore error


keep_listnm=true
for one_nonlist in "${gl_ignorable_nonlists[@]}"; do
    if test "${one_nonlist}" = "${listnm}"; then
        keep_listnm=false
        break
	fi
done

if $keep_listnm; then
    # Even if we keep the list name, we reformat the field to make the closing
    # right-hand bracket come right after the list name value, but we still
    # append the appropriate number of trailing SPACE characters to use
    # whatever field length we observed with our input, minus the length of the
    # 'LIST:' landmark token.
    #
    #     O:23666  N    [S:2015-10-26 12:55:52]  2015-10-26 12:55:52  [LIST: ads             ]  sender@example.com             (b:   1.3K; l:   144)     blah blah blah some random subject
    #     N:23666  N                             2015-10-26 12:55:52  [ads]                sender@example.com             (b:   1.3K; l:   144)     blah blah blah some random subject
    #
    remaining_listnm_spaces=$(( $needed_listnm_spaces - ${#listnm} - 2 ))  # minus 2 because we are supplying the '[' and ']' brackets here
    printf -v outp_string '%s[%s]%'${remaining_listnm_spaces}'s' "${outp_string}" "${listnm}" ''
else
    # Here we are suppressing the value in the list name field. We do this
    # simply by emitting the appropriate number of SPACE characters.
    #
    #     O:23666  N    [S:2015-10-26 12:55:52]  2015-10-26 12:55:52  [LIST: ads             ]  sender@example.com             (b:   1.3K; l:   144)     blah blah blah some random subject
    #     N:23666  N                             2015-10-26 12:55:52                       sender@example.com             (b:   1.3K; l:   144)     blah blah blah some random subject
    #
    printf -v outp_string '%s%'${needed_listnm_spaces}'s' "${outp_string}" ''
fi

# Tack back on the remainder of the index format line that does not require any special handling
printf -v outp_string '%s%s' "${outp_string}" "${whatev5}"

# # DEBUG go
#     printf 'O:%s\n' "${orig_string}" 1>&2
#     printf 'N:%s\n' "${outp_string}" 1>&2
# # DEBUG end

printf '%s\n' "${outp_string}"

